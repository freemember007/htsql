#
# This file contains expected test output data for regression tests.
# It was generated automatically by the `regress` routine.
#

suite: routine
tests:
- suite: htsql-ctl
  tests:
  - ctl: []
    stdout: |
      HTSQL-CTL - HTSQL command-line administrative application
      Copyright (c) 2006-2013, Prometheus Research, LLC

      Run `htsql-ctl help` for general usage and list of routines.
      Run `htsql-ctl help <routine>` for help on a specific routine.
  - ctl: [--help]
    stdout: |+
      HTSQL-CTL - HTSQL command-line administrative application
      Copyright (c) 2006-2013, Prometheus Research, LLC
      Usage: htsql-ctl <routine> [options] [arguments]

      Run `htsql-ctl help` for general usage and list of routines.
      Run `htsql-ctl help <routine>` for help on a specific routine.

      Available routines:
        extension (ext)          : list and describe HTSQL extensions
        help (h, ?)              : describe the usage of the application and its routines
        regress (test)           : run regression tests
        server (serve, s)        : start an HTTP server handling HTSQL requests
        shell (sh)               : start an HTSQL shell
        ui                       : start a visual HTSQL browser
        version                  : display the version of the application

  - ctl: [--version]
    stdout: |+
      HTSQL 2.3.3
      Copyright (c) 2006-2013, Prometheus Research, LLC

      This is free software: you are free to change and redistribute it.
      There is NO WARRANTY, to the extent permitted by law.  This software
      is released under the AGPLv3 as well as a permissive license for use
      with open source databases.  See http://htsql.org/license/.

      The HTSQL language and implementation were developed by members
      of the HTSQL Project (http://htsql.org/).

- suite: htsql-ctl-help
  tests:
  - ctl: [help, help]
    stdout: |+
      HELP - describe the usage of the application and its routines
      Usage: htsql-ctl help [ROUTINE [FEATURE]]

      Run 'htsql-ctl help' to describe the usage of the application and
      get the list of available routines.

      Run 'htsql-ctl help <routine>' to describe the usage of the
      specified routine.

      Some routines may contain separate descriptions of some features.
      Run 'htsql-ctl help <routine> <feature>' to describe a specific
      feature.

      Arguments:
        ROUTINE                  : the name of the routine to describe
        FEATURE                  : the feature to describe

  - ctl: [help]
    stdout: |+
      HTSQL-CTL - HTSQL command-line administrative application
      Copyright (c) 2006-2013, Prometheus Research, LLC
      Usage: htsql-ctl <routine> [options] [arguments]

      Run `htsql-ctl help` for general usage and list of routines.
      Run `htsql-ctl help <routine>` for help on a specific routine.

      Available routines:
        extension (ext)          : list and describe HTSQL extensions
        help (h, ?)              : describe the usage of the application and its routines
        regress (test)           : run regression tests
        server (serve, s)        : start an HTTP server handling HTSQL requests
        shell (sh)               : start an HTSQL shell
        ui                       : start a visual HTSQL browser
        version                  : display the version of the application

- suite: htsql-ctl-version
  tests:
  - ctl: [help, version]
    stdout: |+
      VERSION - display the version of the application
      Usage: htsql-ctl version

      Run 'htsql-ctl version' to display the version of HTSQL.

  - ctl: [version]
    stdout: |+
      HTSQL 2.3.3
      Copyright (c) 2006-2013, Prometheus Research, LLC

      This is free software: you are free to change and redistribute it.
      There is NO WARRANTY, to the extent permitted by law.  This software
      is released under the AGPLv3 as well as a permissive license for use
      with open source databases.  See http://htsql.org/license/.

      The HTSQL language and implementation were developed by members
      of the HTSQL Project (http://htsql.org/).

- suite: htsql-ctl-shell
  tests:
  - ctl: [help, shell]
    stdout: |+
      SHELL - start an HTSQL shell
      Usage: htsql-ctl shell [DB]

      The routine starts an interactive HTSQL shell over the specified database.

      The DB argument specifies database connection parameters; must have the
      form:

          engine://username:password@host:port/database

      Here,

        - ENGINE is the type of the database server; supported values are
          `sqlite`, `pgsql`, `mysql`, `mssql` and `oracle`.
        - The parameters USERNAME:PASSWORD are used for authentication.
        - The parameters HOST:PORT indicate the address of the database
          server.
        - DATABASE is the name of the database; for SQLite, the path to the
          database file.

      All parameters except ENGINE and DATABASE are optional.

      When the shell is started, you will see the shell prompt with the
      database name followed by `$`.  Type an HTSQL query and press ENTER to
      execute it.  Type a command with any arguments and press ENTER to
      execute the command.  In particular, use `help` to get a list of shell
      commands, `help <command>` to describe a command.

      Type `exit` or Ctrl-D to exit the shell.

      Shell commands: (run 'htsql-ctl help shell <command>' for more help)
        help [command]           : describe the shell or a shell command
        version                  : print version and license information
        exit                     : quit the shell
        user [remote_user]       : set the remote user for HTTP requests
        describe [name]          : describe a database entity
        headers on|off           : display HTTP status line and headers
        pager on|off             : pipe long output to a pager
        [get] /query             : execute an HTSQL query
        post filename /query     : execute an HTSQL query with POST data
        run filename.htsql       : run an HTSQL query from a file

      Arguments:
        DB                       : the connection URI

      Valid options:
        -p [--password]          : ask for the database password
        -E [--extension] EXT [+] : include extra extensions
        -C [--config] FILE       : read HTSQL configuration from FILE

  - ctl: [shell, 'sqlite:build/regress/sqlite/htsql_demo.sqlite']
    stdout: |+
      /count(school)
       | count(school) |
      -+---------------+-
       |             9 |

  - ctl: [shell, -E, 'htsql:db=''sqlite:build/regress/sqlite/htsql_demo.sqlite''']
    stdout: |+
      /count(school)
       | count(school) |
      -+---------------+-
       |             9 |

  - ctl: [shell, -C, build/regress/sqlite/htsql_demo.yaml]
    stdout: |+
      /count(school)
       | count(school) |
      -+---------------+-
       |             9 |

  - ctl: [shell, 'sqlite:build/regress/sqlite/htsql_demo.sqlite', -E, 'htsql:debug=true',
      -E, tweak.meta]
    stdout: |
      /meta(/count(table))
       | count(table) |
      -+--------------+-
       |           15 |

       ----
       /count(table)
       SELECT "table"."count"
       FROM (SELECT COUNT(1) AS "count"
             FROM "table") AS "table"
       WHERE ("table"."count" IS NOT NULL)
  - ctl: [shell, 'sqlite:build/regress/sqlite/htsql_demo.sqlite', -E, 'htsql:debug=false',
      -E, 'htsql:debug=true']
    stdout: |+
      /count(school)
       | count(school) |
      -+---------------+-
       |             9 |

  - ctl: [shell, 'sqlite:build/regress/sqlite/htsql_demo.sqlite']
    stdout: |
      help help
      help
      help error
      error
      HELP - describe the shell or a shell command
      Usage: help [command]

      Type `help` to learn how to use the shell and to get a list of available
      commands.

      Type `help <command>` to learn how to use the specified command.

      To execute an HTSQL query, type

          /query

      To execute a shell command, type

          command [arguments...]

      Available commands:
        help [command]           : describe the shell or a shell command
        version                  : print version and license information
        exit                     : quit the shell
        user [remote_user]       : set the remote user for HTTP requests
        describe [name]          : describe a database entity
        headers on|off           : display HTTP status line and headers
        pager on|off             : pipe long output to a pager
        [get] /query             : execute an HTSQL query
        post filename /query     : execute an HTSQL query with POST data
        run filename.htsql       : run an HTSQL query from a file

      ** unknown command 'error'
      ** unknown command 'error'
  - ctl: [shell, 'sqlite:build/regress/sqlite/htsql_demo.sqlite']
    stdout: |+
      help version
      version
      VERSION - print version and license information
      Usage: version

      Type `version` to list the current software version and
      license information.

      HTSQL 2.3.3
      Copyright (c) 2006-2013, Prometheus Research, LLC

      This is free software: you are free to change and redistribute it.
      There is NO WARRANTY, to the extent permitted by law.  This software
      is released under the AGPLv3 as well as a permissive license for use
      with open source databases.  See http://htsql.org/license/.

      The HTSQL language and implementation were developed by members
      of the HTSQL Project (http://htsql.org/).

  - ctl: [shell, 'sqlite:build/regress/sqlite/htsql_demo.sqlite']
    stdout: |+
      help exit
      exit
      /count(school)
      EXIT - quit the shell
      Usage: exit

      Type `exit` or Ctrl-D to quit the shell.

  - ctl: [shell, 'sqlite:build/regress/sqlite/htsql_demo.sqlite']
    stdout: |
      help user
      user
      user htsql_demo
      USER - set the remote user for HTTP requests
      Usage: user [remote_user]

      To set the remote user for HTTP requests, type `user <name>`.

      To unset the remote user for HTTP requests, type `user`.

      ** remote user is unset
      ** remote user is set to 'htsql_demo'
  - ctl: [shell, 'sqlite:build/regress/sqlite/htsql_demo.sqlite']
    stdout: |
      help describe
      describe
      describe department
      describe department.school_code
      describe department.course
      describe error
      DESCRIBE - describe a database entity
      Usage: describe [name]

      Type `describe` to list the content of the database.

      Type `describe <table>` to describe a table and list table
      attributes.

      Typ `describe <table>.<column>` or `describe <table>.<link>`
      to describe a table attribute.

      SQLITE:///build/regress/sqlite/htsql_demo.sqlite - HTSQL database

      Labels:
        appointment              : table
        class                    : table
        classification           : table
        confidential             : table
        course                   : table
        course_classification    : table
        department               : table
        enrollment               : table
        instructor               : table
        prerequisite             : table
        program                  : table
        program_requirement      : table
        school                   : table
        semester                 : table
        student                  : table

      DEPARTMENT - table

      SQL name:
        department

      Unique keys:
        department(code) {primary}
        department(name)

      Foreign keys:
        department(school_code) -> school(code) {nullable}
        appointment(department_code) -> department(code)
        course(department_code) -> department(code)

      Identity:
        code

      Labels:
        code                     : text column
        name                     : text column
        school_code              : text column
        school                   : link to school
        appointment              : plural link to appointment
        course                   : plural link to course

      DEPARTMENT.SCHOOL_CODE - text column

      SQL name:
        department.school_code

      Domain:
        text

      Nullable?
        yes

      Foreign keys:
        department(school_code) -> school(code) {nullable}

      Link:
        link to school

      DEPARTMENT.COURSE - plural link to course

      Joins:
        department(code) -> course(department_code)

      Labels:
        department_code          : text column
        no                       : integer column
        title                    : text column
        credits                  : integer column
        description              : text column
        department               : link to department
        class                    : plural link to class
        course_classification    : plural link to course_classification
        prerequisite_via_of_course : plural link to prerequisite
        prerequisite_via_on_course : plural link to prerequisite

      ** unknown identifier 'error'
  - ctl: [shell, 'sqlite:build/regress/sqlite/htsql_demo.sqlite']
    stdout: "help headers\nheaders\nheaders on\n/count(school)\nheaders off\n/count(school)\nHEADERS
      - display HTTP status line and headers\nUsage: headers on|off\n\nType `headers
      on` to enable output of HTTP status line and headers along\nwith any HTTP response
      body.\n\nType `headers off` to disable output of HTTP status line and headers.\nOnly
      HTTP response body will be displayed.\n\n** expected 'on' or 'off'\n** headers
      are turned on\n200 OK\r\nContent-Type: text/plain; charset=UTF-8\r\nVary: Accept\r\n\r\n
      | count(school) |\n-+---------------+-\n |             9 |\n\n** headers are
      turned off\n | count(school) |\n-+---------------+-\n |             9 |\n\n"
  - ctl: [shell, 'sqlite:build/regress/sqlite/htsql_demo.sqlite']
    stdout: |
      help pager
      pager
      pager on
      pager off
      PAGER - pipe long output to a pager
      Usage: pager on|off

      Type `pager on` or `pager off` to enable or disable the pager
      respectively.

      If the pager is enabled, and the number of lines in the HTTP response
      exceeds the height of the terminal, the response is displayed via the
      pager.

      The pager is a command which allows you to scroll and search in the
      output.  The pager application is determined by the environment variable
      $PAGER.  When $PAGER is not set, one of the common pagers such as
      `/usr/bin/more` is used if available.  The pager could only be enabled
      when the shell is running in a terminal.

      ** expected 'on' or 'off'
      ** pager cannot be enabled in the non-interactive mode
      ** pager is disabled
  - ctl: [shell, 'sqlite:build/regress/sqlite/htsql_demo.sqlite']
    stdout: |
      help get
      get
      get /count(school)
      /count(school)
      /error
      GET - execute an HTSQL query
      Usage: [get] /query

      Type `get /query` or just `/query` to execute an HTSQL query.

      The output of the query is dumped to the console.  When the pager is
      enabled and the number of lines in the response body exceeds the height
      of the terminal, the output is displayed via the pager.  Use `pager off`
      to disable the pager.

      By default, the command does not dump the response status line and the
      headers.  To enable displaying the status line and the headers along
      with the response body, use `headers on`.

      ** a query is expected
       | count(school) |
      -+---------------+-
       |             9 |

       | count(school) |
      -+---------------+-
       |             9 |

      Found unknown attribute:
          error
      While translating:
          /error
           ^^^^^
  - ctl: [shell, 'sqlite:build/regress/sqlite/htsql_demo.sqlite']
    stdout: |
      help post
      post
      post build/regress/post.json /school
      post build/regress/post.data application/x-www-form-urlencoded /school
      post error /school
      POST - execute an HTSQL query with POST data
      Usage: post filename /query

      Type `post filename /query` or `post filename content-type /query` to
      execute an HTSQL query with POST data.

      The content of the POST request is read from the file `filename`.  You
      can optionally specify the content type of the POST data as a second
      parameter.  If content type is not specified, it is deduced from the
      file extension.

      The output of the query is dumped to the console.  When the pager is
      enabled and the number of lines in the response body exceeds the height
      of the terminal, the output is displayed via the pager.  Use `pager off`
      to disable the pager.

      By default, the command does not dump the response status line and the
      headers.  To enable displaying the status line and the headers along
      with the response body, use `headers on`.

      ** a query is expected
      POST requests are not permitted.
      POST requests are not permitted.
      ** file 'error' does not exist
  - ctl: [shell, 'sqlite:build/regress/sqlite/htsql_demo.sqlite']
    stdout: |
      help run
      run
      run build/regress/run.htsql
      run error
      RUN - run an HTSQL query from a file
      Usage: run filename.htsql

      Type `run filename.htsql` to load and execute an HTSQL query from a file.

      The command reads an HTSQL query from the given file and executes it as
      a GET request.

      The output of the query is dumped to the console.  When the pager is
      enabled and the number of lines in the response body exceeds the height
      of the terminal, the output is displayed via the pager.  Use `pager off`
      to disable the pager.

      By default, the command does not dump the response status line and the
      headers.  To enable displaying the status line and the headers along
      with the response body, use `headers on`.

      ** a file name is expected
       | count(school) | count(program) | count(department) |
      -+---------------+----------------+-------------------+-
       |             9 |             40 |                27 |

       | school                               |
       +------+-------------------------------+
       | code | name                          |
      -+------+-------------------------------+-
       | art  | School of Art & Design        |
       | bus  | School of Business            |
       | edu  | College of Education          |
       | eng  | School of Engineering         |
       | la   | School of Arts and Humanities |
       | mus  | School of Music & Dance       |
       | ns   | School of Natural Sciences    |
       | ph   | Public Honorariums            |
       | sc   | School of Continuing Studies  |

       | course                                                                                             |
       +-----------------+-----+-------------------------------+---------+----------------------------------+
       | department_code | no  | title                         | credits | description                      |
      -+-----------------+-----+-------------------------------+---------+----------------------------------+-
       | ee              | 107 | Exploration of Electrical     |       4 | "Exploration of electrical       |
       :                 :     : Engineering                   :         : engineering through several      :
       :                 :     :                               :         : hands-on activities that cover a :
       :                 :     :                               :         : broad spectrum of applications   :
       :                 :     :                               :         : and fundamental concepts. "      :
       | ee              | 202 | Engineering Electromagnetics  |       3 | Static electric and magnetic     |
       :                 :     :                               :         : fields; solutions to static      :
       :                 :     :                               :         : field problems, electromagnetic  :
       :                 :     :                               :         : waves, boundary conditions,      :
       :                 :     :                               :         : engineering applications.        :
       | ee              | 220 | Semiconductor Devices         |       3 | Theory of semiconductor devices, |
       :                 :     :                               :         : principles of design and         :
       :                 :     :                               :         : fabrication, p-n junctions,      :
       :                 :     :                               :         : bipolar transistors, their       :
       :                 :     :                               :         : structure, operation modes and   :
       :                 :     :                               :         : application, MOS capacitors and  :
       :                 :     :                               :         : MOSFETs.                         :
       | ee              | 221 | Semiconductor Devices Lab     |       2 | Provides practical examination   |
       :                 :     :                               :         : of semiconductor devices         :
       :                 :     :                               :         : properties.                      :
       | ee              | 228 | Circuits and Electronics      |       3 | Fundamentals of lumped circuit   |
       :                 :     :                               :         : abstraction: resistive elements  :
       :                 :     :                               :         : and networks, energy storage     :
       :                 :     :                               :         : elements, switches, amplifiers,  :
       :                 :     :                               :         : analog and digital circuit       :
       :                 :     :                               :         : principles.                      :
       | ee              | 251 | Mathematical Methods in       |       3 | Topics in mathematics useful in  |
       :                 :     : Engineering                   :         : engeineering: differential       :
       :                 :     :                               :         : equations, Fourier series,       :
       :                 :     :                               :         : Laplace transforms, boundary     :
       :                 :     :                               :         : value problems.                  :
       | ee              | 315 | Signals and Systems           |       3 | Concepts of continuous and       |
       :                 :     :                               :         : digital signal analysis,         :
       :                 :     :                               :         : modeling continuous and discrete :
       :                 :     :                               :         : linear dynamical systems.        :
       | ee              | 319 | Electric Power Systems        |       3 | Introductory course to the field |
       :                 :     :                               :         : of electric power and electrical :
       :                 :     :                               :         : to/from mechanical power         :
       :                 :     :                               :         : conversion.                      :
       | ee              | 329 | Optical Communication         |       3 | Study of optical communication   |
       :                 :     :                               :         : systems with emphasis on physics :
       :                 :     :                               :         : of the optical processes and     :
       :                 :     :                               :         : system functional units.         :
       | ee              | 412 | Laboratory in Electrical      |       4 | Hands-on experience covering     |
       :                 :     : Engineering                   :         : areas of optical transforms,     :
       :                 :     :                               :         : electro-optics devices, signal   :
       :                 :     :                               :         : processing, fiber optics         :
       :                 :     :                               :         : transmission, and holography.    :
       | ee              | 436 | PCB Design                    |       3 | Principles of PCB design,        |
       :                 :     :                               :         : development and manufacturing    :
       :                 :     :                               :         : process details.                 :
       | ee              | 437 | PCB Design Lab                |       3 | Practice in PCB design using     |
       :                 :     :                               :         : specific software.               :
       | ee              | 505 | Information Theory            |       3 | Mathematical measurement of      |
       :                 :     :                               :         : information; information         :
       :                 :     :                               :         : transfer in discrete systems;    :
       :                 :     :                               :         : redundancy, efficiency, and      :
       :                 :     :                               :         : channel capacity; encoding       :
       :                 :     :                               :         : systems.                         :
       | ee              | 615 | Learning and Adaptive Systems |       3 | Adaptive and learning control    |
       :                 :     :                               :         : systems; system identification;  :
       :                 :     :                               :         : performance indices; gradient,   :
       :                 :     :                               :         : stochastic approximation,        :
       :                 :     :                               :         : controlled random search         :
       :                 :     :                               :         : methods; introduction to pattern :
       :                 :     :                               :         : recognition.                     :

      ** file 'error' does not exist
- suite: htsql-ctl-server
  tests:
  - ctl: [help, server]
    stdout: |+
      SERVER - start an HTTP server handling HTSQL requests
      Usage: htsql-ctl server [DB]

      The routine starts an HTTP server that serves HTSQL requests over the
      specified database.

      The DB argument specifies database connection parameters; must have the
      form:

          engine://username:password@host:port/database

      Here,

        - ENGINE is the type of the database server; supported values are
          `sqlite`, `pgsql`, `mysql`, `mssql` and `oracle`.
        - The parameters USERNAME:PASSWORD are used for authentication.
        - The parameters HOST:PORT indicate the address of the database
          server.
        - DATABASE is the name of the database; for SQLite, the path to the
          database file.

      All parameters except ENGINE and DATABASE are optional.

      By default, the HTTP server listens on the port 8080 on all available
      interfaces.  Use options `--host` and `--port` to override the default
      values.

      The HTTP logs are dumped to the standard output in the Apache Common Log
      Format.  Use option `--quiet` to suppress the logs.

      Arguments:
        DB                       : the connection URI

      Valid options:
        -p [--password]          : ask for the database password
        -E [--extension] EXT [+] : include extra extensions
        -C [--config] FILE       : read HTSQL configuration from FILE
        --host HOST              : host to listen for incoming connections
        --port PORT              : port to listen for incoming connections
        -q [--quiet]             : display as little as possible

  - py: get-1
    stdout: |2+
       | count(school) |
      -+---------------+-
       |             9 |


  - end-ctl: [server, 'sqlite:build/regress/sqlite/htsql_demo.sqlite', -q]
    stdout: ''
  - py: get-2
    stdout: |2+
       | count(school) |
      -+---------------+-
       |             9 |


  - end-ctl: [server, 'sqlite:build/regress/sqlite/htsql_demo.sqlite', --host, 127.0.0.1,
      --port, '8088', -q]
    stdout: ''
