#
# Copyright (c) 2006-2013, Prometheus Research, LLC
#

title: Standard Data Types, Functions, and Operations
suite: library
tests:

########################################################################

- title: Literals
  tests:

  # Untyped literals
  - uri: /{null(), '', 'HTSQL', '%ce%bb%cf%8c%ce%b3%ce%bf%cf%82'}

  # Boolean values
  - uri: /{true(), false()}
  - uri: /{boolean('true'), boolean('false')}
  # Invalid Boolean literals
  - uri: /boolean('')
    expect: 400
  - uri: /boolean('yes')
    expect: 400

  # Text values
  - uri: /{text(''), text('HTSQL'), text('O''Reilly'),
           text('%ce%bb%cf%8c%ce%b3%ce%bf%cf%82'),
           text('$-b \pm \sqrt{b^2 - 4ac} \over 2a$')}
    unless: mssql
  # The regression database for MS SQL Server uses Latin1 locale and therefore
  # is unable to represent greek characters.
  - uri: /{text(''), text('HTSQL'), text('O''Reilly'),
           text('zo%c3%b6logy'),
           text('$-b \pm \sqrt{b^2 - 4ac} \over 2a$')}
    if: mssql
  - uri: /{text('832040')}

  # Integer values
  - uri: /{0, 7, -97, 3571}
  - uri: /{integer('4862'), integer('-9694845')}
  # 64-bit signed integers
  - uri: /{integer('-9223372036854775808'),
           integer('9223372036854775807')}
  # Invalid integer literal
  - uri: /{integer('2.5e1')}
    expect: 400
  # Out of range
  - uri: /{18446744073709551616}
    expect: 400
    unless: oracle
  # Oracle does not have a range limitation for the `INTEGER` data type.
  - uri: /{18446744073709551616, 340282366920938463463374607431768211456}
    if: oracle

  # Decimal values
  - uri: /{1.0, -2.5, 0.875}
  - uri: /{decimal('1E-10')}
  # Arbitrary length
  - uri: /{4154781481226426191177580544000000.808017424794512875886459904961710757005754368000000000}
    unless: mssql
  # Invalid decimal literals
  - uri: /{decimal('vingt-cinq')}
    expect: 400

  # Float values
  - uri: /{0e0, -57721e-5, 36288e2}
  - uri: /{float('2147483647')}
  # Invalid float literal
  - uri: /float('vingt-cinq')
    expect: 400
  # Infinity
  - uri: /{1e1024}
    expect: 400
  - uri: /{float('inf')}
    expect: 400

  # Date values
  - uri: /{date('2010-04-15')}
  # Invalid date
  - uri: /date('2010-13-07')
    expect: 400

  # Time values
  - uri: /{time('20:03'), time('20:13:04.5')}
  # Invalid time
  - uri: /{time('29:04')}
    expect: 400

  # Datetime values
  - uri: /{datetime('2010-04-15'), datetime('2010-04-15 20:13'),
           datetime('2010-04-15T20:13:04.5'),
           datetime('2010-04-15 20:13:04.5 -0400')}
  # Invalid Datetime value
  - uri: /{datetime('2010-13-07 17:43')}
    expect: 400
  - uri: /{datetime('2010-06-05 29:04')}
    expect: 400

########################################################################

- title: Logical and Comparison Operators
  tests:

  # Boolean literals
  - uri: /{true(), false()}
  # Boolean conversion
  - uri: /{boolean(null()), boolean('true'), boolean('false')}
  - uri: /{boolean(integer(null())), boolean(0.0), boolean(1e0)}
  - uri: /{boolean(text(null())),
           boolean(text('')),
           boolean(text('FALSE'))}
  - uri: /{boolean(date(null())), boolean(date('2010-04-15'))}
  # AND, OR, NOT
  - uri: /{true()&true(), true()&false(), false()&true(), false()&false()}
  - uri: /{true()|true(), true()|false(), false()|true(), false()|false()}
  - uri: /{!true(), !false()}
  - uri: /{null()&true(), null()&false(), null()&null()}
  - uri: /{null()|true(), null()|false(), null()|null()}
  - uri: /{!null()}
  # Is NULL
  - uri: /{is_null(null()), is_null('NULL'), is_null(0)}

  # Equality
  - uri: /{true()=true(), 1=1, 'HTSQL'='HTSQL'}
  - uri: /{date('2010-04-15')=date('2010-04-15'),
           time('20:03')=time('20:03'),
           datetime('2010-04-15 20:13')=datetime('2010-04-15 20:13')}
  - uri: /{true()!=false(), 1!=0, 'HTSQL'!='PITA'}
  - uri: /{date('2010-04-15')!=date('1991-08-20'),
           time('20:03')!=time('20:13:04.5'),
           datetime('2010-04-15 20:13')!=datetime('1991-08-20 02:01')}
  - uri: /{true()!=true(), 1!=1, 'HTSQL'!='HTSQL'}
  - uri: /{date('2010-04-15')!=date('2010-04-15'),
           time('20:03')!=time('20:03'),
           datetime('2010-04-15 20:13')!=datetime('2010-04-15 20:13')}
  - uri: /{true()=false(), 1=0, 'HTSQL'='PITA'}
  - uri: /{date('2010-04-15')=date('1991-08-20'),
           time('20:03')=time('20:13:04.5'),
           datetime('2010-04-15 20:13')=datetime('1991-08-20 02:01')}
  # IN
  - uri: /{5={2,3,5,7}, 'HTSQL'!={'ISBL','SQUARE','QUEL'}}
  - uri: /{5!={2,3,5,7}, 'HTSQL'={'ISBL','SQUARE','QUEL'}}
  # NULL and Total Equality
  - uri: /{1=null(), 1!=null(), null()=null(), null()!=null()}
  - uri: /{false()={false(),null()}, true()={false(),null()},
           false()!={false(),null()}, false()!={true(),null()}}
  - uri: /{null()={true(),false()}, null()!={true(),false()}}
  - uri: /{1==1, 1!==0, 1==null(), 1!==null(),
           null()==null(), null()!==null()}
  # Coercion
  - uri: /{7=0.7e1, '13'=13.0, '13'!=='13.0'}
  # Inadmissible operands
  - uri: /{true()=1}
    expect: 400
  - uri: /{'cinq'!=4.9}
    expect: 400
  - uri: /{date('2010-04-15')==1991}
    expect: 400
  - uri: /{date('2010-04-15')=datetime('2010-04-15')}
    expect: 400
  - uri: /{datetime('2010-04-15 20:13')!==time('02:01')}
    expect: 400

  # Comparison
  - uri: /{1<10, 7.0<=7.0, 'omega'>'alpha'}
  - uri: /{date('2010-04-15')>=date('1991-08-20'),
           time('20:03')<time('20:13:04.5'),
           datetime('2010-04-15 20:13')>datetime('1991-08-20 02:01')}
  - uri: /{1>=10, 7.0>7.0, 'omega'<='alpha'}
  - uri: /{date('2010-04-15')<date('1991-08-20'),
           time('20:03')>=time('20:13:04.5'),
           datetime('2010-04-15 20:13')<=datetime('1991-08-20 02:01')}
  # NULL
  - uri: /{0<null(), ''>null(), null()>=null()}
  # Coercion
  - uri: /{175e-2>'875e-3', '2010-04-15'>=date('1991-08-20')}
  # Inadmissible operands
  - uri: /{false()<true()}
    expect: 400
  - uri: /{'cinq'>4.9}
    expect: 400
  - uri: /{date('2010-04-15')>=1991}
    expect: 400
  - uri: /{datetime('2010-04-15 20:13')>time('02:01')}
    expect: 400

  # If NULL and NULL If
  - uri: /{if_null('Victor', 'William'),
           if_null(null(), 'William'),
           if_null('Victor', null()),
           if_null(null(), null())}
  - uri: /{null_if('George', 'George'),
           null_if('George', 'Harry'),
           null_if(null(),  'Harry'),
           null_if('George', null()),
           null_if(null(), null())}
  # Coercion
  - uri: /{if_null(1, 0.1e1), null_if(1, 0.1e1)}
  # Inadmissible operands
  - uri: /{if_null('cinq', 5)}
    expect: 400
  - uri: /{null_if('cinq', 5)}
    expect: 400
  - uri: /{if_null(date('2010-04-15'),1991)}
    expect: 400
  - uri: /{null_if(datetime('2010-04-15 20:13'),time('02:01'))}
    expect: 400

  # If and Switch
  - uri: /{if(true(), 'then'),
           if(false(), 'then'),
           if(null(), 'then')}
  - uri: /{if(true(), 'then', 'else'),
           if(false(), 'then', 'else'),
           if(null(), 'then', 'else')}
  - uri: /{if(7=0, 'none', 7=1, 'one', 7=2, 'two', 'many')}
  - uri: /{switch(1, 1, 'George', 2, 'Harry'),
           switch(2, 1, 'George', 2, 'Harry'),
           switch(3, 1, 'George', 2, 'Harry')}
  - uri: /{switch(1, 1, 'George', 2, 'Harry', 'Edward'),
           switch(2, 1, 'George', 2, 'Harry', 'Edward'),
           switch(3, 1, 'George', 2, 'Harry', 'Edward')}
  # Coercion
  - uri: /{if(true(), 1, 0e0)}
  - uri: /{switch(date('2010-04-15'),
                  '1991-08-20', 'WWW',
                  '2010-04-15', 'HTSQL')}
  # Inadmissible operands
  - uri: /{if('', 'then', 'else')}
    expect: 400
  - uri: /{switch(1, date('2010-04-15'), 1, date('1991-08-20'), 2)}
    expect: 400
  - uri: /{switch(1, 1, 'George', 2, false())}
    expect: 400

  # Comparison with id()
  - uri: /school{id()}?id()='art'
  - uri: /school{id()}?id()=[art]
  - uri: /school{id()}?id()=@school[art].id()
  - uri: /school{id()}?id()!={[art], [bus], [edu], [ph], [sc]}
  - uri: /program{id()}?school=$school :given $school := 'art'
  - uri: /program{id()}?[art.gart]=this()
  - uri: /school?id()=null
  # Bad ids
  - uri: /school?id()=id(123)
    expect: 400
  - uri: /school?id()='art.gart'
    expect: 400
  - uri: /school?id()=[art.gart]
    expect: 400
  - uri: /this()=[art]
    expect: 400
  - uri: /school?id()=code
    expect: 400

########################################################################

- title: Numeric Functions and Operators
  tests:

  # Conversion
  - uri: /{integer(null()), integer('60'), integer(60)}
  - uri: /{decimal(null()), decimal('2.125'), decimal(2.125)}
  - uri: /{float(null()), float('271828e-5'), float('271828e-5')}
  - uri: /{integer(2.125), integer(271828e-5)}
  - uri: /{decimal(60), decimal(271828e-5)}
  - uri: /{float(60), float(2.125)}
  - uri: /{integer(text('60'))}
  - uri: /{decimal(text('2.125'))}
  - uri: /{float(text('271828e-5'))}
  # Inadmissible operand
  - uri: /{integer('cinq')}
    expect: 400
  - uri: /{decimal(true())}
    expect: 400
  - uri: /{float(date('2010-04-15'))}
    expect: 400
  # Not a number
  - uri: /{integer(text('zero'))}
    if: [sqlite, mysql]
  - uri: /{float(text('zero'))}
    if: [sqlite, mysql]
  - uri: /{integer(text('cinq'))}
    expect: 409
    ignore: true
    unless: [sqlite, mysql]
  # Integer overflow
  - uri: /{integer(4294967296.0)}
    expect: 409
    ignore: true
    if: [pgsql, mssql]
  - uri: /{integer(1.8446744073709552e+19)}
    expect: 409
    ignore: true
    if: [pgsql, mssql]
  - uri: /{integer(4294967296.0),
           integer(1.8446744073709552e+19)}
    unless: [pgsql, mssql]

  # Arithmetics
  - uri: /{+7, -7, +2.125, -2.125, +271828e-5, -271828e-5}
  - uri: /{7920+9504, 7.25+0.875, 120207e-5+57721e-5}
  - uri: /{7920-9504, 7.25-0.875, 120207e-5-57721e-5}
  - uri: /{7920*9504, 7.25*0.875, 120207e-5*57721e-5}
  - uri: /{7920/9504, 7.25/0.875, 120207e-5/57721e-5}
  # Coercion
  - uri: /{7+2.125, 7+271828e-5, 2.125+271828e-5}
  - uri: /{7-2.125, 7-271828e-5, 2.125-271828e-5}
  - uri: /{7*2.125, 7*271828e-5, 2.125*271828e-5}
  - uri: /{7/2.125, 7/271828e-5, 2.125/271828e-5}
  # Inadmissible operands
  - uri: /{'cinq'+7}
    expect: 400
  - uri: /{2.125-date('2010-04-15')}
    expect: 400
  - uri: /{true()/271828e-5}
    expect: 400
  # Integer overflow
  - uri: /{7*2147483647}
    expect: 409
    ignore: true
    if: [pgsql, mssql]
  - uri: /{9223372036854775807+1}
    # FIXME: silent overflow under MySQL 5.1; error under MySQL 5.5.
    expect: 409
    ignore: true
    if: [pgsql, mssql]
  - uri: /{7*2147483647, 9223372036854775807+1}
    # FIXME: Older SQLite silently truncates the result, newer SQLite
    # converts the result to float.
    if: [oracle]
  # Division by zero
  - uri: /{7/0}
    expect: 409
    ignore: true
    unless: [sqlite, mysql]
  - uri: /{7/0.0}
    expect: 409
    ignore: true
    unless: [sqlite, mysql]
  - uri: /{7/0e0}
    expect: 409
    ignore: true
    unless: [sqlite, mysql, oracle]
  - uri: /{7/0, 7/0.0, 7/0e0}
    if: [sqlite, mysql]
  - uri: /{0e0/0e0, 7/0e0}
    if: [oracle]

  # Rounding and Truncating
  - uri: /{round(3272.78125), round(3272.78125,2), round(3272.78125,-2)}
  - uri: /{trunc(3272.78125), trunc(3272.78125,2), trunc(3272.78125,-2)}
  # Calculated precision.
  - uri: /{round(3272.78125,1+1), round(3272.78125,1-1), round(3272.78125,-1-1)}
  - uri: /{trunc(3272.78125,1+1), trunc(3272.78125,1-1), trunc(3272.78125,-1-1)}
  # Negative values.
  - uri: /{round(-3272.78125), round(-3272.78125,2), round(-3272.78125,-2)}
  - uri: /{trunc(-3272.78125), trunc(-3272.78125,2), trunc(-3272.78125,-2)}
  # Float arguments.
  - uri: /{round(271828e-5), round(-271828e-5)}
  - uri: /{trunc(271828e-5), trunc(-271828e-5)}
  # Coercion
  - uri: /{round(9973), trunc(9973)}
  # Bug in MSSQL 2008R2, see
  # https://connect.microsoft.com/SQLServer/feedback/details/646516/bad-example-for-round
  - uri: /{round(9973,-2)}
    unless: [mssql]
  # Inadmissible operand
  - uri: /{round(271828e-5,2)}
    expect: 400
  - uri: /{trunc(271828e-5,2)}
    expect: 400

  # Square root
  - uri: /{sqrt(2), sqrt(2.0), sqrt(2e0)}

########################################################################

- title: Text Functions and Operators
  tests:

  # Conversion
  - uri: /{text(null()), text('OMGWTFBBQ')}
  - uri: /{text(true()), text(false())}
  - uri: /{text(60), text(2.125), text(-57721e-5)}
  - uri: /{text(date('2010-04-15'))}
  - uri: /{text(time('20:03'))}
  - uri: /{text(datetime('2010-04-15 20:13'))}

  # Length
  - uri: /{length(''), length('OMGWTFBBQ')}
  - uri: /{length(null())}
  # Inadmissible operand
  - uri: /{length(date(2010-04-15))}
    expect: 400

  # Concatenation
  - uri: /{'OMG'+'WTF'+'BBQ'}
  - uri: /{null()+'LOL', 'LOL'+null(),
           text(null())+text(null())}
  # Inadmissible operands
  - uri: /{text('LOL')+7}
    expect: 400

  # Contains
  - uri: /{'OMGWTFBBQ'~'wtf', 'OMGWTFBBQ'!~'LOL'}
  - uri: /{'OMGWTFBBQ'!~'wtf', 'OMGWTFBBQ'~'LOL'}
  # Bug in MSSQL 2005, `SELECT (CASE WHEN ('LOL' LIKE NULL) THEN 1 END)`
  # generates [<1>].
  - uri: /{null()~'LOL', 'LOL'~null(), null()~null()}
    unless: mssql
  - uri: /{null()~'LOL', null()~null()}
    if: mssql
  - uri: /this(){true()}?'LOL'~null()
    if: mssql

  # Slicing
  - uri: /{head('OMGWTFBBQ'), head('OMGWTFBBQ',3), head('OMGWTFBBQ',-3)}
  - uri: /{tail('OMGWTFBBQ'), tail('OMGWTFBBQ',3), tail('OMGWTFBBQ',-3)}
  - uri: /{head('OMGWTFBBQ',0), tail('OMGWTFBBQ',0)}
  - uri: /{head(null()), tail(null()),
           head('OMGWTFBBQ',null()), tail('OMGWTFBBQ',null())}
  - uri: /{slice('OMGWTFBBQ',3,6), slice('OMGWTFBBQ',3,-3),
           slice('OMGWTFBBQ',-6,6), slice('OMGWTFBBQ',-6,-3)}
  - uri: /{slice('OMGWTFBBQ',0,0), slice('OMGWTFBBQ',6,3),
           slice('OMGWTFBBQ',10,13), slice('OMGWTFBBQ',-3,-6)}
  - uri: /{slice(null(),3,-3), slice('OMGWTGBBQ',null(),null()),
           slice('OMGWTFBBQ',-3,null()), slice('OMGWTFBBQ',null(),3)}
  - uri: /{at('OMGWTFBBQ',0), at('OMGWTFBBQ',3), at('OMGWTFBBQ',-3)}
  - uri: /{at('OMGWTFBBQ',3,3), at('OMGWTFBBQ',6,-3),
           at('OMGWTFBBQ',-3,3), at('OMGWTFBBQ',-12,6)}
  - uri: /{at('OMGWTFBBQ',10), at('OMGWTFBBQ',0,-3)}
  - uri: /{at(null(),3), at('OMGWTFBBQ',null(),3), at('OMGWTFBBQ',3,null())}

  # Transformations
  - uri: /{upper('lol'), lower('LOL')}
  - uri: /{trim('  LOL  '), ltrim('  LOL  '), rtrim('  LOL  ')}
  - uri: /{replace('OMGWTFBBQ','WTF','LOL')}
  - uri: /{replace('OMGWTFBBQ','wtf','LOL'),
           replace('OMGWTFBBQ','WTF','lol')}
    unless: [mssql, oracle]
  # `REPLACE` in MSSQL respects the database collation, which is
  # case-insensitive for the regression database.  Same with Oracle
  # when `NLS_SORT = BINARY_CI` and `NLS_COMP = LINGUISTIC`.
  - uri: /{replace('OMGWTFBBQ','wtf','LOL')}
    if: [mssql, oracle]
  - uri: /{replace('OMGWTFBBQ','WTF','lol')}
    if: [mssql, oracle]
  - uri: /{replace('floccinaucinihilipilification','ili','LOL')}
  - uri: /{replace('OMGWTFBBQ','','LOL'),
           replace('OMGWTFBBQ','WTF','')}
  - uri: /{replace(null(),'WTF','LOL'),
           replace('OMGWTFBBQ',null(),'LOL'),
           replace('OMGWTFBBQ','WTF',null())}

########################################################################

- title: Date Functions and Operators
  tests:

  # Conversion
  - uri: /{date(null()), date('2010-04-15')}
  - uri: /{date(text('2010-04-15'))}
  - uri: /{date(datetime('2010-04-15 20:13'))}
  # Inadmissible operand
  - uri: /{date('2010-13-07')}
    expect: 400
  - uri: /{date(true())}
    expect: 400
  - uri: /{date(7)}
    expect: 400
  - uri: /{date(time('20:13'))}
    expect: 400
  # Not a date
  - uri: /{date(text('birthday'))}
    expect: 409
    ignore: true
    unless: [sqlite, mysql]
  - uri: /{date(text('2010-13-07'))}
    expect: 409
    ignore: true
    unless: [sqlite, mysql]
  - uri: /{date(text('birthday')),
           date(text('2010-13-07'))}
    if: [sqlite, mysql]

  # Construction
  - uri: /{today()}
    ignore: \d{4}-\d{2}-\d{2}
  - uri: /{date(2010,4,15), date(2010,3,46), date(2011,-8,15)}

  # Components
  - uri: /{year(date('2010-04-15')),
           month(date('2010-04-15')),
           day(date('2010-04-15'))}

  # Arithmetics 
  - uri: /{date('1991-08-20')+6813,
           date('2010-04-15')-6813,
           date('2010-04-15')-date('1991-08-20')}

########################################################################

- title: Time Functions and Operators
  tests:

  # Conversion
  - uri: /{time(null()), time('20:03')}
  - uri: /{time(text('20:03'))}
    unless: oracle
  - uri: /{time(text('20:03:00'))}
    if: oracle
  - uri: /{time(datetime('2010-04-15 20:13'))}
  # Inadmissible operand
  - uri: /{time('29:04')}
    expect: 400
  - uri: /{time(true())}
    expect: 400
  - uri: /{time(7)}
    expect: 400
  - uri: /{time(date('2010-04-15'))}
    expect: 400
  # Not a datetime value
  - uri: /{time(text('just a moment ago'))}
    expect: 409
    ignore: true
    unless: [sqlite, mysql]
  - uri: /{time(text('29:04'))}
    expect: 409
    ignore: true
    unless: [sqlite, mysql]
  - uri: /{time(text('just a moment ago')),
           time(text('29:04'))}
    if: [sqlite, mysql]

  # Components
  - uri: /{hour(time('20:13:04.5')),
           minute(time('20:13:04.5')),
           second(time('20:13:04.5'))}

########################################################################

- title: DateTime Functions and Operators
  tests:

  # Conversion
  - uri: /{datetime(null()), datetime('2010-04-15 20:13')}
  - uri: /{datetime(text('2010-04-15 20:13'))}
    unless: oracle
  - uri: /{datetime(text('2010-04-15 20:13:00'))}
    if: oracle
  - uri: /{datetime(date('2010-04-15'))}
  # Inadmissible operand
  - uri: /{datetime('2010-13-07 17:43')}
    expect: 400
  - uri: /{datetime(true())}
    expect: 400
  - uri: /{datetime(7)}
    expect: 400
  - uri: /{datetime(time('20:13'))}
    expect: 400
  # Not a datetime value
  - uri: /{datetime(text('just a moment ago'))}
    expect: 409
    ignore: true
    unless: [sqlite, mysql]
  - uri: /{datetime(text('2010-13-07 17:43'))}
    expect: 409
    ignore: true
    unless: [sqlite, mysql]
  - uri: /{datetime(text('just a moment ago')),
           datetime(text('2010-13-07 17:43'))}
    if: [sqlite, mysql]

  # Construction
  - uri: /{now()}
    ignore: true
  - uri: /{datetime(2010,4,15), datetime(2010,4,15,20,13),
           datetime(2010,4,15,20,13,4.5)}
  - uri: /{datetime(2010,3,46,25,-289,124.5)}
  - uri: /{datetime(date('2010-04-15'),time('20:03'))}

  # Components
  - uri: /{year(datetime('2010-04-15 20:13:04.5')),
           month(datetime('2010-04-15 20:13:04.5')),
           day(datetime('2010-04-15 20:13:04.5'))}
  - uri: /{hour(datetime('2010-04-15 20:13:04.5')),
           minute(datetime('2010-04-15 20:13:04.5')),
           second(datetime('2010-04-15 20:13:04.5'))}

  # Arithmetics
  - uri: /{datetime('1991-08-20 02:01')+6813.75838544,
           datetime('2010-04-15 20:13:04.5')-6813.75838544}

########################################################################

- title: Aggregate functions
  tests:

  # Exists, Every, Count
  # (Oracle cannot handle EXISTS and an aggregate in the same SELECT clause)
  - uri: /course?department_code='lang'
  - uri: /{exists(course?department_code='lang'),
           every(course?department_code='lang'),
           count(course?department_code='lang')}
    unless: oracle
  - uri: /{exists(course?department_code='lang'),
           every(course?department_code='lang')}
    if: oracle
  - uri: /{count(course?department_code='lang')}
    if: oracle
  # Applied to an empty set
  - uri: /course?department_code='str'
  - uri: /{exists(course?department_code='str'),
           every(course?department_code='str'),
           count(course?department_code='str')}
    unless: oracle
  # Applied to all-TRUE, all-FALSE, mixed sets
  - uri: /course{department_code,no,credits,credits>3}
                ?department_code={'me','mth','phys'}
  - uri: /{exists(course{credits>3}?department_code='me'),
           every(course{credits>3}?department_code='me'),
           count(course{credits>3}?department_code='me')}
    unless: oracle
  - uri: /{exists(course{credits>3}?department_code='mth'),
           every(course{credits>3}?department_code='mth'),
           count(course{credits>3}?department_code='mth')}
    unless: oracle
  - uri: /{exists(course{credits>3}?department_code='phys'),
           every(course{credits>3}?department_code='phys'),
           count(course{credits>3}?department_code='phys')}
    unless: oracle
  # Coercion
  - uri: /department{code,school.code,boolean(school)}
  - uri: /{exists(department{school}),
           every(department{school}),
           count(department{school})}
    unless: oracle
  # Singular operand
  - uri: /{exists(true())}
    expect: 400
  - uri: /{every(true())}
    expect: 400
  - uri: /{count(true())}
    expect: 400

  # Min, Max
  - uri: /course{no,credits}?department_code='be'
  - uri: /{min(course{credits}?department_code='be'),
           max(course{credits}?department_code='be')}
  # Applied to an empty set
  - uri: /course?department_code='str'
  - uri: /{min(course{credits}?department_code='str'),
           max(course{credits}?department_code='str')}
  # Non-numeric operands
  - uri: /{min(student.dob), max(student.dob)}
  - uri: /{min(student.name), max(student.name)}
  # Inadmissible operand
  - uri: /{min(student.is_active), max(student.is_active)}
    expect: 400

  # Sum, Avg
  - uri: /{sum(course{credits}?department_code='be'),
           count(course{credits}?department_code='be'),
           avg(course{credits}?department_code='be')}
  # Applied to an empty set
  - uri: /{sum(course{credits}?department_code='str'),
           count(course{credits}?department_code='str'),
           avg(course{credits}?department_code='str')}
  # Inadmissible operands
  - uri: /{sum(student.dob)}
    expect: 400
  - uri: /{avg(student.name)}
    expect: 400

########################################################################

- title: Table functions and operators
  tests:

  # Joining
  # 1 - N
  - uri: /school.program
  - uri: /school.department
  # N - 1
  - uri: /program.school
  - uri: /department
  # 1 - 1
  - uri: /instructor.confidential
  - uri: /confidential.instructor
  # Cross join
  - uri: /school.({} -> school)
  # Fiber join
  - uri: /department.(school_code -> program)
  - uri: /classification.(code -> classification{part_of_code})
            {part_of_code, code}
  # Context
  - uri: /school.({} -> school){root().school.code, this().code}
  # Invalid link
  - uri: /student.instructor
    expect: 400

  # Filtering
  - uri: /school?code='mus'
  - uri: /student?!is_active
  # Coercion
  - uri: /department?school

  # Sorting
  - uri: /department.sort(name)
  - uri: /department.sort(name+)
  - uri: /department.sort(name-)
  # NULL
  - uri: /department.sort(school.code+)
  - uri: /department.sort(school.code-)
  # Combined with joining
  - uri: /school.department.sort(code+)
  - uri: /school.sort(code+).department.sort(code+)
  # Multiple arguments
  - uri: /course.sort(credits-,no+)?department_code='stdart'

  # Limiting
  - uri: /course.limit(9)
  - uri: /course.limit(3,6)
  # Combined with sort
  - uri: /course.sort(credits+).limit(9)
  - uri: /course.limit(9).sort(credits+)
  - uri: /course.sort(credits-).limit(9).sort(no-)

  # Selecting
  - uri: /school{name}
  - uri: /department{school.name, name}
  - uri: /school{*}
  - uri: /department{school.*, *}

########################################################################

- title: Decorators
  tests:

  # AS decorator
  - uri: /(school :as 'List of Schools')
  - uri: /school{name :as Name}
  - uri: /(school :as 'List of Schools')
            {name :as Name, count(department) :as '# of Departments'}

  # Direction decorator
  - uri: /school{name+}
  - uri: /course{credits-, no+, title}?department_code='stdart'

